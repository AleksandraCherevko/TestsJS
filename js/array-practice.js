// const friends = ["Mango", "Kiwi", "Poly", "Ajax"];
// console.table(friends);

// friends[1] = 'jhsuwhushqu';
// friends[0] = 'dhwjhduwhduhq';
// console.table(friends);


// –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –º–∞—Å—Å–∏–≤—É
// const lastIndex = friends.length - 1;
// console.log(lastIndex);


// –ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é

// let a = 10;
// let b = 10;

// console.log(a);
// console.log(b);

// a = 20;
// console.log(a);
// console.log(b);




//  –°—Å—ã–ª–æ—á–Ω–æ–µ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ (referential equality)
//  */
// const a = [1, 2, 3];
// const b = a;

// console.log('a', a);
// console.log('b', b);

// a[0] = 500;

// console.log('a', a);
// console.log('b', b);

// console.log(a === b);

// console.log([1, 2, 3] === [1, 2, 3]); 

// =====================================================

// const cart = [51, 18, 13, 24, 7, 85, 19];
// let total = 0;

// for (let i = 0; i < cart.length; i += 1){
//   console.log(cart[i]);
//   total += cart[i];
// }

// console.log(total)

// =====================================================
// –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É –≤—Å–µ—Ö —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª

// const numbers = [51, 18, 13, 24, 7, 85, 19];
// let total = 0;
// for (let i = 0; i < numbers.length; i += 1){
//   console.log(numbers[i]);
//   if (numbers[i] % 2 === 0) {
//     console.log('—á–µ—Ç–Ω–æ–µ!');
//     total += numbers[i];
//   } 
//   }

// console.log('Total', 'total');



// // =====================================================
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ–∏—Å–∫–∞ –ª–æ–≥–∏–Ω–∞
//  * - –ï—Å–ª–∏ –ª–æ–≥–∏–Ω–∞ –Ω–µ—Ç, –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [–ª–æ–≥–∏–Ω] –Ω–µ –Ω–∞–π–¥–µ–Ω.'
//  * - –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ª–æ–≥–∏–Ω, –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [–ª–æ–≥–∏–Ω] –Ω–∞–π–¥–µ–Ω.'

// const logins = ["m4ngoDoge", "k1widab3st", "poly1scute", "aj4xth3m4n"];
// const loginToFind = "poly1scute";
// let message = '';

// for (let i = 0; i < logins.length; i += 1) {
//   const login = logins[i];

//   if (login === loginToFind) {
//     message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–∞–π–¥–µ–Ω.";
//     break;
//   }
//   else 
//      message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–µ –Ω–∞–π–¥–µ–Ω.";
  
// }
  
// console.log(message);


// // =====================================================
/*
 * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ–∏—Å–∫–∞ —Å–∞–º–æ–≥–æ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —á–∏—Å–ª–∞ –≤ –º–∞—Å—Å–∏–≤–µ,
 * –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ —á—Ç–æ —á–∏—Å–ª–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ (–Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è).
 */

// const numbers = [51, 18, 13, 24, 7, 85, 19];
// let smallestNumber = numbers[0];

// for (const number of numbers) {
//   if (number < smallestNumber) {
//     smallestNumber = number;
//   }
// }

// console.log('smallestNumber: ', smallestNumber);



// * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ–∏—Å–∫–∞ —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —á–∏—Å–ª–∞ –≤ –º–∞—Å—Å–∏–≤–µ,
//  * –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ —á—Ç–æ —á–∏—Å–ª–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ (–Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è).
//  * /

// const numbers = [51, 18, 13, 24, 7, 85, 19];
// let biggestNumber = numbers[0];
// for (const number of numbers) {
//   if (number > biggestNumber) {
//     biggestNumber = number;
//   }
// }

// console.log("biggestNumber:", biggestNumber);



/*
 * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –≤ –æ–¥–Ω–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
 * –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ.
 * –ü—É—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞  –≤ —Å—Ç—Ä–æ–∫–µ –±—É–¥—É—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –∑–∞–ø—è—Ç–æ–π.
 * - –°–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ for
 * - –ü–æ—Ç–æ–º —á–µ—Ä–µ–∑ join()
 */

// const friends = ['Mango', 'Poly', 'Kiwi', 'Ajax'];
// let string = '';

// for (const friend of friends) {
//   string += friend + ',';
// }

// string = string.slice(0, string.length - 1);

// console.log(friends);
// console.log(string);




// const friends = ["Mango", "Poly", "Kiwi", "Ajax"];
// const string = friends.join(',');
// console.log(string);


// // =====================================================

/*
 * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π –∑–∞–º–µ–Ω—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π.
 * –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ ¬´JavaScript¬ª, —Ç–æ –Ω–∞ –≤—ã—Ö–æ–¥–µ –¥–æ–ª–∂–µ–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞ ¬´jAVAsCRIPT¬ª.
 */

// const string = 'JavaScript';
// const letters = string.split('');
// let invertedString = '';

// console.log(letters);

// for (const letter of letters) {
//   console.log(letter);

//   if (letter === letter.toLowerCase()) {
//     console.log('–≠—Ç–∞ –±—É–∫–≤–∞ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ')
//     invertedString += letter.toLocaleUpperCase();
//   } else {
//     invertedString += letter.toLowerCase();
//   }
// }

// console.log(invertedString);




// // =====================================================
// –°—Ç–≤–æ—Ä—ñ—Ç—å –º–∞—Å–∏–≤ genres –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ ¬´Jazz¬ª —Ç–∞ ¬´Blues¬ª.
//1. –î–æ–¥–∞–π—Ç–µ ¬´–†–æ–∫-–Ω-—Ä–æ–ª¬ª –¥–æ –∫—ñ–Ω—Ü—è.
//2. –í–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É.
//3. –í–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É. –ö–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –º–∞—Å–∏–≤—É –¥–æ–≤—ñ–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏.
//4. –í–∏–¥–∞–ª—ñ—Ç—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç —Ç–∞ –≤–∏–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
//5. –í—Å—Ç–∞–≤—Ç–µ ¬´Country¬ª —Ç–∞ ¬´Reggae¬ª –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –º–∞—Å–∏–≤—É.

// const genres = ["Jazz", "Blues"];

// genres.push("–†–æ–∫-–Ω-—Ä–æ–ª");
// console.log(genres);


// console.log(genres[0]);

// console.log(genres[genres.length - 1]);



//! ================================================

//* Example 2 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–∏—Ö –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —É –∑–º—ñ–Ω–Ω—ñ–π values —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞. –ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.

// const values = "8 3";
// const valuesArray = values.split(" ");
// const a = Number(valuesArray[0]);
// const b = Number(valuesArray[1]);
// const square = a * b;
// console.log(square);


//* Example 3 - –ü–µ—Ä–µ–±—ñ—Ä –º–∞—Å–∏–≤—É

// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –º–∞—Å–∏–≤—É fruits —Ü–∏–∫–ª–æ–º for. –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É –≤–∏–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ –Ω–æ–º–µ—Ä_–µ–ª–µ–º–µ–Ω—Ç–∞: –∑–Ω–∞—á–µ–Ω–Ω—è_–µ–ª–µ–º–µ–Ω—Ç–∞. –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 1.

// const fruits = ["üçé", "üçá", "üçë", "üçå", "üçã"];
// for (let i = 0; i < fruits.length; i += 1) {
//   console.log(`${i + 1}: ${fruits[i]}`);
// }



//! ================================================

//* Example 5 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —É—Å—ñ —Å–ª–æ–≤–∞ —Ä—è–¥–∫–∞ –∫—Ä—ñ–º –ø–µ—Ä—à–æ–≥–æ —ñ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ. –†–µ–∑—É–ª—å—Ç—É—é—á–∏–π —Ä—è–¥–æ–∫ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∞–±–æ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—è —Å–∏–º–≤–æ–ª –ø—Ä–æ–±—ñ–ª—É. –°–∫—Ä–∏–ø—Ç –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ —Ä—è–¥–∫–∞.

// const string = "Welcome to the future"; // to the
/*
1. –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ —Ä—è–¥–æ–∫ —É –º–∞—Å–∏–≤ –∑ —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è–º " "
2. –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É —ñ –æ—Å—Ç–∞–Ω–Ω—ñ–π
3. –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–∞—Å–∏–≤ –Ω–∞–∑–∞–¥ –¥–æ —Å—Ç—Ä–æ–∫–∏ –∑ —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è–º " "
*/

// const strArray = string.split(" ");
// strArray.shift();
// strArray.pop();
// const newString = strArray.join(" ");

// console.log(newString);


//! ================================================

//* Example 6 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π ¬´—Ä–æ–∑–≥–æ—Ä—Ç–∞—î¬ª —Ä—è–¥–æ–∫ (–∑–≤–æ—Ä–æ—Ç–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫ –±—É–∫–≤) —ñ –≤–∏–≤–æ–¥–∏—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.

// const string = "Welcome to the future";
// const reversedStr = string.split("").reverse().join("");
// console.log(reversedStr);


// const fruits = ["apple", "peach", "pear", "banana"];
// const fruitsArrayLength = fruits.length;
// console.log(fruits.length);


//! ================================================

// function splitMessage(message, delimiter) {
//   let words = message.split(delimiter);

//   return words;
// }

// console.log(splitMessage("Mango hurries to the train", " "));
// console.log(splitMessage("Mango", ""));


//! ================================================

// function calculateEngravingPrice(message, pricePerWord) {

//     let messageArray = message.split(" ");
//     let sum = messageArray.length * pricePerWord;

//     console.log("${message} ${sum}");
//     return sum;
// }

// console.log(calculateEngravingPrice("JavaScript is in my blood", 10));
// console.log(calculateEngravingPrice("Web-development is creative work", 40));


//! ================================================
// function makeStringFromArray(array, delimiter) {
//   let string = array.join(delimiter);

//   return string;
// }

// console.log(
//   makeStringFromArray(["Mango", "hurries", "to", "the", "train"], " ")
// );



//! ================================================

// const fruits = ["apple", "plum", "pear", "orange", "banana"];


// const firstTwoEls = fruits.slice(0, 2);

// const nonExtremeEls = fruits.slice(1, 4);

// const lastThreeEls = fruits.slice(-3);

class User {
    email;



  get email() {
    return this.email;
  }

  set email(newEmail) {
    this.email = newEmail;
  }
}

class Admin extends User {
  // Change code below this line
constructor ({email, accessLevel}){
super(email);
this.accessLevel = accessLevel;}

  // Change code above this line
}

const mango = new Admin({
  email: "mango@mail.com",
  accessLevel: Admin.AccessLevel.SUPERUSER,
});

console.log(mango.email); // "mango@mail.com"
console.log(mango.accessLevel); // "superuser"